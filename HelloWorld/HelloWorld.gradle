apply plugin: 'application'

// -----------------------------------------------------------------------------
// Docker
// -----------------------------------------------------------------------------
buildscript {
    repositories {
		mavenLocal()
		mavenCentral()
	}
    dependencies {
	   classpath libraries.docker
    }
}

// docker plugin
apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin

// import remote API plugin task groups
import com.bmuschko.gradle.docker.tasks.*
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

mainClassName = 'de.fraunhofer.iosb.helloworld.HelloWorld'

task dockerBuildPitchImage(type: DockerBuildImage) {
    dependsOn 'install'
	group = 'Docker'
	description = 'Builds the helloworld docker image for Pitch'
    dockerFile = project.file('Dockerfile-pi')
    buildArgs.put('version', "${helloWorldVersion}")
	inputDir = file('.')
    images.add ("ivct/helloworld:pi-skeleton-${helloWorldVersion}")
}

task dockerBuildPorticoImage(type: DockerBuildImage) {
    dependsOn 'install'
	group = 'Docker'
	description = 'Builds the helloworld docker image for Pitch'
    dockerFile = project.file('Dockerfile-po')
    buildArgs.put('version', "${helloWorldVersion}")
	inputDir = file('.')
    images.add ("ivct/helloworld:po-${helloWorldVersion}")
}

task dockerBuildMakImage(type: DockerBuildImage) {
    dependsOn 'install'
	group = 'Docker'
	description = 'Builds the helloworld docker image for Pitch'
    dockerFile = project.file('Dockerfile-ma')
    buildArgs.put('version', "${helloWorldVersion}")
	inputDir = file('.')
    images.add ("ivct/helloworld:ma-${helloWorldVersion}")
}

tasks.register ("dockerBuildImage") {
    group = 'Docker'
    description = 'Creates docker images for RTIs'
    dependsOn 'dockerBuildPitchImage'
    dependsOn 'dockerBuildPorticoImage'
    dependsOn 'dockerBuildMakImage'
}


dependencies {
    compileOnly group: 'io.github.msg134', name: 'IEEE1516e', version: ivctVersion
    compile     libraries.slf4j_api
    runtime     libraries.logback_classic
	runtime     libraries.logback_core
//    runtime     files("$System.env.LRC_CLASSPATH")
}

tasks.withType(CreateStartScripts) {
	classpath += files('lib')
doLast {
		def windowsScriptFile = file getWindowsScript()
		def unixScriptFile = file getUnixScript()
		windowsScriptFile.text = windowsScriptFile.text.replace('%APP_HOME%\\lib\\lib', '%APP_HOME%\\lib;%LRC_CLASSPATH%')
		unixScriptFile.text = unixScriptFile.text.replace('$APP_HOME/lib/lib', '$APP_HOME/lib:$LRC_CLASSPATH')
	}
}

